name: Builder

env:
  BUILD_ARGS: "--test"
  MONITORED_FILES: "build.yaml config.yaml Dockerfile rootfs src .*\\.go"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  init:
    runs-on:
      - ubuntu-latest
    name: Initialize builds
    outputs:
      changed_addons: ${{ steps.changed_addons.outputs.addons }}
      changed: ${{ steps.changed_addons.outputs.changed }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3.5.0

      - name: Get changed files
        id: changed_files
        uses: tj-actions/changed-files@v35.7.6

      - name: Find add-on directories
        id: addons
        uses: home-assistant/actions/helpers/find-addons@master

      - name: Get changed add-ons
        id: changed_addons
        run: |
          declare -a changed_addons
          echo "CF: ${{ steps.changed_files.outputs.all_changed_files }}"
          for addon in ${{ steps.addons.outputs.addons }}; do
            if [[ "${{ steps.changed_files.outputs.all_changed_files }}" =~ $addon ]]; then
              for file in ${{ env.MONITORED_FILES }}; do
                  echo "Checking '${{ steps.changed_files.outputs.all_changed_files }}' =~ '$addon/$file'"
                  if [[ "${{ steps.changed_files.outputs.all_changed_files }}" =~ $addon/$file ]]; then
                    if [[ ! "${changed_addons[@]}" =~ $addon ]]; then
                      echo "Changed: '$addon/$file'"
                      changed_addons+=("\"${addon}\",");
                    fi
                  fi
              done
            fi
          done

          changed=$(echo ${changed_addons[@]} | rev | cut -c 2- | rev)

          if [[ -n ${changed} ]]; then
            echo "Changed add-ons: $changed";
            echo "changed=true" >> $GITHUB_OUTPUT;
            echo "addons=[$changed]" >> $GITHUB_OUTPUT;
          else
            echo "No add-on had any monitored files changed (${{ env.MONITORED_FILES }})";
          fi
  build:
    needs: init
    runs-on:
      - ubuntu-latest
    if: needs.init.outputs.changed == 'true'
    name: Build ${{ matrix.arch }} ${{ matrix.addon }} add-on using go ${{ matrix.go }}
    strategy:
      max-parallel: 4
      matrix:
        addon: ${{ fromJson(needs.init.outputs.changed_addons) }}
        arch: [ "aarch64", "amd64", "armhf", "armv7", "i386" ]
        go: [ '1.19' ]
        include:
          - arch: "aarch64"
            golang_arch: "arm64"
            golang_image: "aarch64/golang:1-alpine"
          - arch: "amd64"
            golang_arch: "amd64"
            golang_image: "golang:1-alpine"
          - arch: "armhf"
            golang_arch: "arm32v6"
            golang_image: "arm32v6/golang:1-alpine"
          - arch: "armv7"
            golang_arch: "arm64"
            golang_image: "arm64golang:1-alpine"
          - arch: "i386"
            golang_arch: "386"
            golang_image: "golang:1-alpine"

    steps:
      - name: Check out repository
        uses: actions/checkout@v3.5.0

      - uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
          check-latest: true
          cache-dependency-path: src/go.sum

      - name: Get information
        id: info
        uses: home-assistant/actions/helpers/info@master
        with:
          path: "./${{ matrix.addon }}"

      - name: Check if add-on should be built
        id: check
        run: |
          if [[ "${{ steps.info.outputs.architectures }}" =~ ${{ matrix.arch }} ]]; then
             echo "build_arch=true" >> $GITHUB_OUTPUT;
             echo "image=$(echo ${{ steps.info.outputs.image }} | cut -d'/' -f3)" >> $GITHUB_OUTPUT;
             if [[ -z "${{ github.head_ref }}" ]] && [[ "${{ github.event_name }}" == "push" ]]; then
                 echo "BUILD_ARGS=" >> $GITHUB_ENV;
             fi
           else
             echo "${{ matrix.arch }} is not a valid arch for ${{ matrix.addon }}, skipping build";
             echo "build_arch=false" >> $GITHUB_OUTPUT;
          fi

      - name: Login to GitHub Container Registry
        if: env.BUILD_ARGS != '--test'
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build ${{ matrix.addon }} add-on
        if: steps.check.outputs.build_arch == 'true'
        uses: home-assistant/builder@2023.03.0
        env:
          GOLANG_ARCH: ${{ matrix.golang_arch }}
          GOLANG_IMAGE: ${{ matrix.golang_image }}
          DOCKER_BUILDKIT: "0"
        with:
          args: |
            ${{ env.BUILD_ARGS }} \
            --${{ matrix.arch }} \
            --target /data/${{ matrix.addon }} \
            --image "${{ steps.check.outputs.image }}" \
            --docker-hub "ghcr.io/${{ github.repository_owner }}" \
            --addon
